// Mocks generated by Mockito 5.4.5 from annotations
// in github_explorer/test/widgets/search_screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:github_explorer/models/github_repository.dart' as _i5;
import 'package:github_explorer/models/issue.dart' as _i6;
import 'package:github_explorer/models/pull_request.dart' as _i7;
import 'package:github_explorer/models/repository_details.dart' as _i2;
import 'package:github_explorer/services/github_service.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeRepositoryDetails_0 extends _i1.SmartFake
    implements _i2.RepositoryDetails {
  _FakeRepositoryDetails_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [GithubService].
///
/// See the documentation for Mockito's code generation for more information.
class MockGithubService extends _i1.Mock implements _i3.GithubService {
  MockGithubService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i5.GithubRepository>> searchRepos(
    String? query, {
    required int? page,
    required int? perPage,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #searchRepos,
              [query],
              {#page: page, #perPage: perPage},
            ),
            returnValue: _i4.Future<List<_i5.GithubRepository>>.value(
              <_i5.GithubRepository>[],
            ),
          )
          as _i4.Future<List<_i5.GithubRepository>>);

  @override
  _i4.Future<_i2.RepositoryDetails> fetchRepoDetails(
    String? owner,
    String? name,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#fetchRepoDetails, [owner, name]),
            returnValue: _i4.Future<_i2.RepositoryDetails>.value(
              _FakeRepositoryDetails_0(
                this,
                Invocation.method(#fetchRepoDetails, [owner, name]),
              ),
            ),
          )
          as _i4.Future<_i2.RepositoryDetails>);

  @override
  _i4.Future<List<_i6.Issue>> fetchIssues(
    String? owner,
    String? name, {
    required int? page,
    required int? perPage,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #fetchIssues,
              [owner, name],
              {#page: page, #perPage: perPage},
            ),
            returnValue: _i4.Future<List<_i6.Issue>>.value(<_i6.Issue>[]),
          )
          as _i4.Future<List<_i6.Issue>>);

  @override
  _i4.Future<List<_i7.PullRequest>> fetchPullRequests(
    String? owner,
    String? name, {
    required int? page,
    required int? perPage,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #fetchPullRequests,
              [owner, name],
              {#page: page, #perPage: perPage},
            ),
            returnValue: _i4.Future<List<_i7.PullRequest>>.value(
              <_i7.PullRequest>[],
            ),
          )
          as _i4.Future<List<_i7.PullRequest>>);
}
